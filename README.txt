NAME: Jack Mandell
CONTACT INFO: jmandel5@u.rochester.edu
CONTENT FILES: Line.java, PLBinarySearchTree.java, PLTest.java, PLTreeNode.java, Point.java
Test files: INPUT_SIMPLE.txt, INPUT_DEGENERATE.txt

DESCRIPTION OF PROJECT:
In this project, we had to use the binary search tree data structure to help us solve the point location problem. The problem consists of a collection of lines in a unit square, which in result creates segmented regions of the square. The goal of the project was to write an algorithm to determine whether or not two points are in the same region of the unit square. 

DESCRIPTION OF MY FILES AND ALGORITHM:
To solve this problem, I used 5 different classes. The Point class stores the x and y values of each point and the Line class stores two points, a slope, an array called instersections, which collects all intersection points with previous lines, and a boolean called infiniteSlope, which is true if a Line is vertical, false otherwise. The PLBinarySearchTree class only stores the root reference and the PLTreeNode builds the binary search tree. Lastly, the PLTest class is where information is gathered from the input file. There are two different input files to test my program. The INPUT_SIMPLE.txt is a modified version of the example in the project description, which does not have any degernate cases, but shows how my progam runs under normal conditions. In the INPUT_DEGENERATE.txt, all of the degnerate cases that I considered are tested. The cases that I considered are the following: parallel lines, colinear lines, lines defined by the same two points, vertical lines, points lying on a segment, and 3 lines meeting at a single point. For each of these degenerate cases, a message is displayed to the command line. When comparing the values of the number of Nodes, average path length, and total path length, I noticed the following relationship: The total path length grew very fast even when the amount of new Nodes increased by only a few, and since this is a BST, it is likely it grows at an exponential growth.

Thye hardest part about this project was really just understanding how the algorithm worked. To summarize how my program works, the main method collects all of the lines and pairs of points and stores them into their own ArrayLists. Before a line is inserted, all intersections with previous lines are added to the line's intersections array. Then the segments, defined by consecutive points in the intersections array, are added into the binary tree. To determine if two points intersect, each point is inputed in the getPath method, which returns a String of Left-Right combinations that the point took to the external Node. If the paths are the same, then the points are in the same region. If two points are not in the same region, the findFirstSeparation method determines at what line segment of the tree the two Points diverge at. This is basically the first line segment that separates the two Points.  

